package connector;

import java.io.*;
import java.net.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Carlos Suarez Fontalvo Creating a client for Sharepoint Online.!
 * following source: https://github.com/lstak/node-sharepoint following article:
 * http://allthatjs.com/2012/03/28/remote-authentication-in-sharepoint-online/
 * following article: http://allthatjs.com/2012/03/29/node-js-meet-sharepoint/
 * following article: https://gist.github.com/2272889
 */
public class SharePointClient {

    //information for signin
    private String _tokenSPO;
    private String userName;
    private String password;
    private String SSLendPoint;
    //Cookie with final signin information
    private String cookieNedToken;
    //Location of SAM.xml template
    private static final String _samFileLocation;
    private static final Logger _log;

    static {
        if (System.getProperty("os.name").toLowerCase().indexOf("windows") != -1) {
            _samFileLocation = System.getProperty("user.dir") + "\\src\\META-INF\\SAML.xml";
        } else {
            _samFileLocation = System.getProperty("user.dir") + "/src/META-INF/SAML.xml";
        }
        _log = Logger.getLogger(SharePointClient.class.getName());
        _log.log(Level.INFO, "Creating Log Service for {0}", SharePointClient.class.getName());
    }

    /**
     * Default constructor for the SharePoint Client
     *
     * @param userName string with username, username@domain.com
     * @param password string with the password for the username submitted
     * @param endPoint string with the target to prepare de SAML file that is
     * going to be sended to the STS (Security Token Service).
     */
    public SharePointClient(String userName, String password, String endPoint) throws Exception {
        this._tokenSPO = _Constants.EXTSTS_SRF_URL;
        this.SSLendPoint = _Constants.DEFAULT_SSL_PROTOCOL + endPoint + _Constants.DEFAULT_LOGIN_PATH;
        this.userName = userName;
        this.password = password;
        this.signin();
    }

    /**
     * This method Send SAML Request to STS (Security Token Service) The
     * application POSTs an SAML Request Security Token message to the Microsoft
     * Online STS, located at the {@link #_tokenSPO}. It uses the already
     * formatted SAML.xml file.
     *
     * @param SAMLFile the content of the XML file with the initial structure
     * @return the securiy token, null if SAMLFile is malformed or STS is down.
     * @throws MalformedURLException
     * @throws IOException
     */
    private String firstPartSignin(StringBuilder SAMLFile) throws MalformedURLException, IOException {

        URLConnection connection = new URL(this._tokenSPO).openConnection();
        connection.setDoOutput(true);
        connection.setRequestProperty("Accept-Charset", _Constants.UTF_8_CHARSET);
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=" + _Constants.UTF_8_CHARSET);
        connection.setRequestProperty("Content-Length", String.valueOf(SAMLFile.length()));
        OutputStream output;
        try {
            output = connection.getOutputStream();
            output.write(SAMLFile.toString().getBytes(_Constants.UTF_8_CHARSET));
            if (output != null) {
                output.close();
            }
        } catch (IOException ex) {
            throw new IOException(ex.getMessage(), ex);
        }

        //Printing the request generated by the Security Token Service (STS) and
        //Getting the token t=...
        InputStream response = connection.getInputStream();
        BufferedReader resBuf = new BufferedReader(new InputStreamReader(response));
        String oString;
        String tokenT = null;
        while ((oString = resBuf.readLine()) != null) {
            int beginIndex = oString.indexOf("<wsse:BinarySecurityToken Id=\"Compact0\">") + ("<wsse:BinarySecurityToken Id=\"Compact0\">").length();
            int endIndex = oString.indexOf("</wsse:BinarySecurityToken>");
            tokenT = oString.substring(beginIndex, endIndex);
            _log.log(Level.CONFIG, tokenT);
        }

        return tokenT;
    }

    /**
     * This method sends the generated security token from the STS to the SPO
     * (SharePoint Online). {@link #SSLendPoint} Its includes a User-Agent
     * header to accomplish this task.
     *
     * @see connector._Constants.DEFAULT_USER_AGENT_WINDOWS for default
     * User-Agent
     * @param STSToken the security token previosly generated
     * @return connection with the cookies: FedAuth and rtFa
     * @throws MalformedURLException
     * @throws ProtocolException
     * @throws IOException
     */
    private HttpURLConnection secondPartSignin(String STSToken) throws MalformedURLException, ProtocolException, IOException {

        HttpURLConnection connection = (HttpURLConnection) new URL(this.SSLendPoint).openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("User-Agent", _Constants.DEFAULT_USER_AGENT_WINDOWS);
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        connection.setRequestProperty("Content-Length", STSToken.length() + "");
        // Necesary, URLConnection class doesn't support auto-redirect disabling.
        // @see: http://stackoverflow.com/questions/2659000/java-how-to-find-the-redirected-url-of-a-url for more information.
        // Tnx to Srinivas for pointing me in this direction.
        connection.setInstanceFollowRedirects(false);
        connection.setDoOutput(true);

        OutputStream output2;
        try {
            output2 = connection.getOutputStream();
            output2.write(STSToken.toString().getBytes());
            if (output2 != null) {
                output2.close();
            }
        } catch (IOException ex) {
            throw new IOException(ex.getMessage(), ex);
        }
        return connection;
    }

    /**
     * This method will generate a String with both FedAuth and rtFa cookie
     * values.
     *
     * @param connection object with cookies embbeded.
     * @return string with the both cookies values.
     * @throws Exception if connection object has invalid cookies format.
     */
    private String getCookieNedToken(HttpURLConnection connection) throws Exception {

        String _cookieNedToken = null;

        List<String> cookies = connection.getHeaderFields().get("Set-Cookie");
        String FedAuthCookie = null;
        String rtFaCookie = null;
        //Printing Authentication cookies
        for (String str : cookies) {
            if (str.indexOf("FedAuth") != -1) {
                FedAuthCookie = str.split(" ")[0].substring(0);
                _log.log(Level.CONFIG, FedAuthCookie);
            }
            if (str.indexOf("rtFa") != -1) {
                rtFaCookie = str.split(" ")[0].substring(0);
                _log.log(Level.CONFIG, rtFaCookie);
            }
        }

        if (FedAuthCookie == null || rtFaCookie == null) {
            throw new Exception("Invalid CookieNed Token!!!");
        } else {
            _cookieNedToken = FedAuthCookie + " " + rtFaCookie;
            _log.log(Level.CONFIG, "CookieNed Token {0}: ", _cookieNedToken);
            //cookieNedToken.addRequestProperty("Cookie", FedAuthCookie + " " + rtFaCookie);
        }

        return _cookieNedToken;
    }

    public String getCookieNedToken() {
        return this.cookieNedToken;
    }

    /**
     * This method will sign in the user into (SPO) SharePoint Online using
     * Claims-Based authentication.
     *
     * @throws Exception
     */
    private void signin() throws Exception {

        _log.log(Level.CONFIG, "SAML Template location at: {0}", _samFileLocation);



        try {
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(
                    new FileInputStream(
                    new File(_samFileLocation)), _Constants.UTF_8_CHARSET));
            StringBuilder text = new StringBuilder();
            String line = in.readLine(); //SAML with the new information appended

            while (line != null) {
                text.append(line.replace("[username]", this.userName).replace("[password]", this.password).replace("[endpoint]", this.SSLendPoint));
                line = in.readLine();
            }

            //Executing the first part of the signin process
            String tokenT = firstPartSignin(text);
            //Executing the second part of the signin process
            HttpURLConnection connection = secondPartSignin(tokenT);
            //Asigning final Token to variable
            this.cookieNedToken = getCookieNedToken(connection);

            _log.log(Level.CONFIG, "Username {0} successfully logged in. \nCookieNed value is: {1}", new Object[]{this.userName, this.cookieNedToken});


        } catch (UnsupportedEncodingException ex) {
            throw new Exception(ex.getMessage(), ex.getCause());
        } catch (IOException ex) {
            throw new Exception(ex.getMessage(), ex.getCause());
        }
    }
}